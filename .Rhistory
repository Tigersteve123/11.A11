theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
plot_percent_use <- function(country_data) {
# Merge world map with country data
# merged_data <- merge(wrld_simpl, country_data, by.x = "NAME", by.y = "COUNTRY")
# Plot using ggplot2
p <- ggplot() +
geom_map(data = country_data, map = fortify(wrld_simpl), mapping = aes(fill = Avg2019))
#geom_polygon(data = merged_data, aes(x = long, y = lat, group = group, fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
plot_percent_use <- function(country_data) {
# Merge world map with country data
merged_data <- merge(wrld_simpl, country_data, by.x = "NAME", by.y = "COUNTRY")
# Plot using ggplot2
p <- ggplot() +
geom_map(data = country_data, map = wrld_simpl, mapping = aes(fill = Avg2019))
#geom_polygon(data = merged_data, aes(x = long, y = lat, group = group, fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
install.packages("sf")
install.packages("sf")
install.packages("sf")
plot_percent_use <- function(country_data) {
# Plot using ggplot2 with geom_map
p <- ggplot() +
geom_map(data = country_data, map = wrld_simpl, aes(map_id = NAME, fill = Avg2019)) +
expand_limits(x = wrld_simpl$long, y = wrld_simpl$lat) +
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
library(maps)
plot_percent_use <- function(country_data) {
# Get a map of the world
world_map <- map_data("world")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "region", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_polygon
p <- ggplot() +
geom_polygon(data = merged_data, aes(x = long, y = lat, group = group, fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- map_data("worldHires")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "region", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_polygon
p <- ggplot() +
geom_polygon(data = merged_data, aes(x = long, y = lat, group = group, fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- map_data("worldHires")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "region", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_polygon
p <- ggplot() +
geom_polygon(data = merged_data, aes(x = long, y = lat, group = group, fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
rm(list=ls())
setwd('/home/yichen/Documents/MIT/11A11')
library(readxl) # For importing Excel data
library(ggplot2) # For plotting
#library(maptools) # Deprecated. Using for the wrld_simpl map dataset
library(stringr) # For regular expressions
library(maps)
#data(wrld_simpl) # Map data for plotting
countryPercent = read_excel("who_cooking_category_fuels.xlsx", sheet = "Country (%)") # Import Country % sheet
# We want to weight data (https://math.stackexchange.com/questions/684519/what-is-the-most-scientific-way-to-assign-weights-to-historical-data) to reduce variance while maintaining the most relevant data
# For now, I will just use 2019 data. Serious errors should not have too much of an impact on the current use case and I don't know enough about using exponential weighting
countryPercent$Avg2019 = sapply(countryPercent["2019"], function(x) as.numeric(str_match(x, "\\d+\\.\\d+")[,1])) # Extracts 2019 averages
countryPercent$Avg2019[is.na(countryPercent$Avg2019)] = 0 # The previous function replaced 0 values with NA. This re-adds the 0 values (they are not NA)
countryPercent$Avg2019 <- as.numeric(countryPercent$Avg2019)
# Separate fuel types into different sets for visualization
countryPercentKerosene = countryPercent[countryPercent$FUEL == "Kerosene",]
countryPercentGas = countryPercent[countryPercent$FUEL == "Gas",]
countryPercentElectricity = countryPercent[countryPercent$FUEL == "Electricity",]
countryPercentBiomass = countryPercent[countryPercent$FUEL == "Biomass",] # Biomass, charcoal, and coal are the fuels of interest as they pollute the heaviest
countryPercentCharcoal = countryPercent[countryPercent$FUEL == "Charcoal",]
countryPercentCoal = countryPercent[countryPercent$FUEL == "Coal",]
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- map_data("worldHires")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "region", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_polygon
p <- ggplot() +
geom_polygon(data = merged_data, aes(x = long, y = lat, group = group, fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
library(rnaturalearth)
install.packages("rnaturalearth")
library(rnaturalearth)
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "iso_a3", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
install.packages("rnaturalearthdata")
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "iso_a3", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
rm(list=ls())
setwd('/home/yichen/Documents/MIT/11A11')
library(readxl) # For importing Excel data
library(ggplot2) # For plotting
#library(maptools) # Deprecated. Using for the wrld_simpl map dataset
library(stringr) # For regular expressions
library(rnaturalearth)
#data(wrld_simpl) # Map data for plotting
countryPercent = read_excel("who_cooking_category_fuels.xlsx", sheet = "Country (%)") # Import Country % sheet
# We want to weight data (https://math.stackexchange.com/questions/684519/what-is-the-most-scientific-way-to-assign-weights-to-historical-data) to reduce variance while maintaining the most relevant data
# For now, I will just use 2019 data. Serious errors should not have too much of an impact on the current use case and I don't know enough about using exponential weighting
countryPercent$Avg2019 = sapply(countryPercent["2019"], function(x) as.numeric(str_match(x, "\\d+\\.\\d+")[,1])) # Extracts 2019 averages
countryPercent$Avg2019[is.na(countryPercent$Avg2019)] = 0 # The previous function replaced 0 values with NA. This re-adds the 0 values (they are not NA)
countryPercent$Avg2019 <- as.numeric(countryPercent$Avg2019)
# Separate fuel types into different sets for visualization
countryPercentKerosene = countryPercent[countryPercent$FUEL == "Kerosene",]
countryPercentGas = countryPercent[countryPercent$FUEL == "Gas",]
countryPercentElectricity = countryPercent[countryPercent$FUEL == "Electricity",]
countryPercentBiomass = countryPercent[countryPercent$FUEL == "Biomass",] # Biomass, charcoal, and coal are the fuels of interest as they pollute the heaviest
countryPercentCharcoal = countryPercent[countryPercent$FUEL == "Charcoal",]
countryPercentCoal = countryPercent[countryPercent$FUEL == "Coal",]
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "iso_a3", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "iso_a3", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = fill_column)) +  # Replace 'fill_column' with your actual column name
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "iso_a3", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +  # Replace 'fill_column' with your actual column name
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "iso_a3", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(group = group, fill = Avg2019)) +  # Replace 'fill_column' with your actual column name
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "iso_a3", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +  # Replace 'fill_column' with your actual column name
scale_fill_continuous(low = "lightblue", high = "darkblue", name = "Average Use in 2019") +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "iso_a3", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue",
name = "Average Use in 2019",
guide = guide_colorbar(title.position = "top",
title.hjust = 0.5)) +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "iso_a3", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
rm(list=ls())
setwd('/home/yichen/Documents/MIT/11A11')
library(readxl) # For importing Excel data
library(ggplot2) # For plotting
#library(maptools) # Deprecated. Using for the wrld_simpl map dataset
library(stringr) # For regular expressions
library(rnaturalearth)
#data(wrld_simpl) # Map data for plotting
countryPercent = read_excel("who_cooking_category_fuels.xlsx", sheet = "Country (%)") # Import Country % sheet
# We want to weight data (https://math.stackexchange.com/questions/684519/what-is-the-most-scientific-way-to-assign-weights-to-historical-data) to reduce variance while maintaining the most relevant data
# For now, I will just use 2019 data. Serious errors should not have too much of an impact on the current use case and I don't know enough about using exponential weighting
countryPercent$Avg2019 = sapply(countryPercent["2019"], function(x) as.numeric(str_match(x, "\\d+\\.\\d+")[,1])) # Extracts 2019 averages
countryPercent$Avg2019[is.na(countryPercent$Avg2019)] = 0 # The previous function replaced 0 values with NA. This re-adds the 0 values (they are not NA)
countryPercent$Avg2019 <- as.numeric(countryPercent$Avg2019)
# Separate fuel types into different sets for visualization
countryPercentKerosene = countryPercent[countryPercent$FUEL == "Kerosene",]
countryPercentGas = countryPercent[countryPercent$FUEL == "Gas",]
countryPercentElectricity = countryPercent[countryPercent$FUEL == "Electricity",]
countryPercentBiomass = countryPercent[countryPercent$FUEL == "Biomass",] # Biomass, charcoal, and coal are the fuels of interest as they pollute the heaviest
countryPercentCharcoal = countryPercent[countryPercent$FUEL == "Charcoal",]
countryPercentCoal = countryPercent[countryPercent$FUEL == "Coal",]
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
# Merge world map with country data
merged_data <- merge(world_map, country_data, by.x = "iso_a3", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
plot_percent_use(countryPercentBiomass)
fake_data <- data.frame(
COUNTRY = c("AFG", "CAN", "FRA", "DEU", "USA"),  # Replace with your actual country codes
Avg2019 = c(10, 20, 30, 40, 50)  # Replace with your actual data
)
plot_percent_use(fake_data)
plot_percent_use <- function(country_data) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
# Merge world map with country data based on country names
merged_data <- merge(world_map, country_data, by.x = "name", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue",
name = "Average Use in 2019",
guide = guide_colorbar(title.position = "top",
title.hjust = 0.5)) +
labs(title = "Percent Use by Country") +
theme_minimal()
return(p)
}
fake_data <- data.frame(
COUNTRY = c("AFG", "CAN", "FRA", "DEU", "USA"),  # Replace with your actual country codes
Avg2019 = c(10, 20, 30, 40, 50)  # Replace with your actual data
)
plot_percent_use(countryPercentBiomass)
plot_percent_use <- function(country_data = countryPercent, fuel) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
country_data = country_data[country_data$FUEL == fuel]
# Merge world map with country data based on country names
merged_data <- merge(world_map, country_data, by.x = "name", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue",
name = "Average Use in 2019",
guide = guide_colorbar(title.position = "top",
title.hjust = 0.5)) +
labs(title = "Percent Use by Country, " + fuel) +
theme_minimal()
return(p)
}
plot_percent_use(countryPercent, "Biomass")
plot_percent_use <- function(country_data = countryPercent, fuel) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
country_data = country_data[country_data$FUEL == fuel,]
# Merge world map with country data based on country names
merged_data <- merge(world_map, country_data, by.x = "name", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue",
name = "Average Use in 2019",
guide = guide_colorbar(title.position = "top",
title.hjust = 0.5)) +
labs(title = "Percent Use by Country, " + fuel) +
theme_minimal()
return(p)
}
plot_percent_use(countryPercent, "Biomass")
plot_percent_use <- function(country_data = countryPercent, fuel) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
country_data = country_data[country_data$FUEL == fuel,]
# Merge world map with country data based on country names
merged_data <- merge(world_map, country_data, by.x = "name", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue",
name = "Average Use in 2019",
guide = guide_colorbar(title.position = "top",
title.hjust = 0.5)) +
labs(title = "Percent Use by Country, " + fuel) +
theme_minimal()
return(p)
}
plot_percent_use(countryPercent, "Biomass")
plot_percent_use <- function(country_data = countryPercent, fuel) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
country_data = country_data[country_data$FUEL == fuel,]
# Merge world map with country data based on country names
merged_data <- merge(world_map, country_data, by.x = "name", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue",
name = "Percent Use in 2019",
guide = guide_colorbar(title.position = "top",
title.hjust = 0.5)) +
labs(title = "Percent Use by Country, " + fuel) +
theme_minimal()
return(p)
}
plot_percent_use(countryPercent, "Biomass")
plot_percent_use <- function(country_data = countryPercent, fuel) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
country_data = country_data[country_data$FUEL == fuel,]
# Merge world map with country data based on country names
merged_data <- merge(world_map, country_data, by.x = "name", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue",
name = "Percent Use in 2019",
guide = guide_colorbar(title.position = "top",
title.hjust = 0.5)) +
labs(title = ("Percent Use by Country, " + fuel)) +
theme_minimal()
return(p)
}
plot_percent_use(countryPercent, "Biomass")
plot_percent_use <- function(country_data = countryPercent, fuel) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
country_data = country_data[country_data$FUEL == fuel,]
# Merge world map with country data based on country names
merged_data <- merge(world_map, country_data, by.x = "name", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue",
name = "Percent Use in 2019",
guide = guide_colorbar(title.position = "top",
title.hjust = 0.5)) +
labs(title = c("Percent Use by Country, ", fuel)) +
theme_minimal()
return(p)
}
plot_percent_use(countryPercent, "Biomass")
plot_percent_use(countryPercent, "Gas")
plot_percent_use <- function(country_data = countryPercent, fuel) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
country_data = country_data[country_data$FUEL == fuel,]
# Merge world map with country data based on country names
merged_data <- merge(world_map, country_data, by.x = "name", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue",
name = "Percent Use in 2019",
guide = guide_colorbar(title.position = "top",
title.hjust = 0.5)) +
labs(title = paste("Percent Use by Country, ", fuel)) +
theme_minimal()
return(p)
}
plot_percent_use(countryPercent, "Biomass") # Biomass, charcoal, and coal are the fuels of interest as they pollute the heaviest
plot_percent_use <- function(country_data = countryPercent, fuel) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
country_data = country_data[country_data$FUEL == fuel,]
# Merge world map with country data based on country names
merged_data <- merge(world_map, country_data, by.x = "name", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue",
name = "Percent Use in 2019",
guide = guide_colorbar(title.position = "top",
title.hjust = 0.5)) +
labs(title = paste("Percent Use by Country,", fuel)) +
theme_minimal()
return(p)
}
plot_percent_use(countryPercent, "Biomass") # Biomass, charcoal, and coal are the fuels of interest as they pollute the heaviest
rm(list=ls())
setwd('/home/yichen/Documents/MIT/11A11')
library(readxl) # For importing Excel data
library(ggplot2) # For plotting
library(stringr) # For regular expressions
library(rnaturalearth) # For map data
countryPercent = read_excel("who_cooking_category_fuels.xlsx", sheet = "Country (%)") # Import Country % sheet
# We want to weight data (https://math.stackexchange.com/questions/684519/what-is-the-most-scientific-way-to-assign-weights-to-historical-data) to reduce variance while maintaining the most relevant data
# For now, I will just use 2019 data. Serious errors should not have too much of an impact on the current use case and I don't know enough about using exponential weighting
countryPercent$Avg2019 = sapply(countryPercent["2019"], function(x) as.numeric(str_match(x, "\\d+\\.\\d+")[,1])) # Extracts 2019 averages
countryPercent$Avg2019[is.na(countryPercent$Avg2019)] = 0 # The previous function replaced 0 values with NA. This re-adds the 0 values (they are not NA)
countryPercent$Avg2019 <- as.numeric(countryPercent$Avg2019)
plot_percent_use <- function(country_data = countryPercent, fuel) {
# Get a higher resolution map of the world
world_map <- ne_countries(scale = "medium", returnclass = "sf")
country_data = country_data[country_data$FUEL == fuel,]
# Merge world map with country data based on country names
merged_data <- merge(world_map, country_data, by.x = "name", by.y = "COUNTRY", all.x = TRUE)
# Plot using ggplot2 with geom_sf
p <- ggplot() +
geom_sf(data = merged_data, aes(fill = Avg2019)) +
scale_fill_continuous(low = "lightblue", high = "darkblue",
name = "Percent Use in 2019",
guide = guide_colorbar(title.position = "top",
title.hjust = 0.5)) +
labs(title = paste("Percent Use by Country,", fuel)) +
theme_minimal()
return(p)
}
plot_percent_use(countryPercent, "Biomass") # Biomass, charcoal, and coal are the fuels of interest as they pollute the heaviest
plot_percent_use(countryPercent, "Charcoal")
plot_percent_use(countryPercent, "Coal")
